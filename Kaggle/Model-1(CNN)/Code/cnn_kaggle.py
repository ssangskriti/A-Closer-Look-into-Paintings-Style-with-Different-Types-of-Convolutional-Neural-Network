# -*- coding: utf-8 -*-
"""CNN-Kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sar52JYTn18rOnhVnaiwGY5LZ0wcw73Q

# Connect to Google Drive
"""

#Step 1 part 1: connect to drive
!apt-get install -y -qq software-properties-common python-software-properties module-init-tools
!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null
!apt-get update -qq 2>&1 > /dev/null
!apt-get -y install -qq google-drive-ocamlfuse fuse
from google.colab import auth
auth.authenticate_user()
from oauth2client.client import GoogleCredentials
creds = GoogleCredentials.get_application_default()
import getpass
!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL
vcode = getpass.getpass()
!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}

!mkdir -p drive
!google-drive-ocamlfuse drive

"""# CNN Model"""

import numpy as np
import pandas as pd
import os
import cv2
import glob
from os import listdir
from os.path import isfile, join
from os import walk
from random import sample
import pickle, cv2
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
from sklearn.preprocessing import LabelEncoder
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras import applications, optimizers
from keras.utils import np_utils
from keras.models import Sequential, Model
from keras.layers import Dropout, Flatten, Dense
from keras.models import model_from_json
from keras.models import load_model
from keras.utils import plot_model
import json

data_root = 'drive/ML-Kaggle/'

model = Sequential()
model.add(Convolution2D(filters=32, kernel_size=(3,3), input_shape=(224,224,3), activation = 'relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Convolution2D(32,3,3, activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(units=512, activation='relu'))
model.add(Dense(units=512, activation='relu'))
model.add(Dense(units=128, activation='relu'))
model.add(Dropout(0.25))
model.add(Dense(units=3, activation = 'softmax'))

sgd = optimizers.SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)

model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])

train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.1, zoom_range=0.2, horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)

train_data = '{}{}'.format(data_root,'training_set/')
test_data = '{}{}'.format(data_root,'test_set/')

training_set = train_datagen.flow_from_directory(train_data, target_size=(224,224), batch_size=32, class_mode='categorical')
test_set = test_datagen.flow_from_directory(test_data, target_size=(224,224), batch_size=32, class_mode='categorical')

classes = training_set.class_indices
print(classes)

print(training_set)
print(test_set)

model.fit_generator(training_set, samples_per_epoch=100, nb_epoch=30, validation_data=test_set, nb_val_samples=300)

plot_model(model, to_file='drive/ML-Kaggle/model.pdf')

def load_model():
    json_file = open('drive/ML-Kaggle/second_model.json', 'r')
    loaded_model_json = json_file.read()
    json_file.close()

    loaded_model = model_from_json(loaded_model_json)
    loaded_model.load_weights('drive/ML-Kaggle/second_model_weights.h5')

    sgd = optimizers.SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)
    loaded_model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])

    return loaded_model

model = load_model()

history = model.fit_generator(training_set, samples_per_epoch=100, nb_epoch=15, validation_data=test_set, nb_val_samples=300)

save_model_path = '{}{}'.format(data_root,'second_model.json')
save_model_weight = '{}{}'.format(data_root,'second_model_weights.h5')
history_path = '{}{}'.format(data_root,'history_2.json')

open(save_model_path, 'w').close()
open(save_model_weight, 'w').close()

model_json = model.to_json()
with open(save_model_path, 'w') as json_file:
    json_file.write(model_json)

model.save_weights(save_model_weight)
print('Model saved to disk!')

with open(history_path, 'w') as f:
    json.dump(history.history, f)
print('History saved to disk!')

print(history.history.keys())

plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

model = load_model()

history = model.fit_generator(training_set, samples_per_epoch=100, nb_epoch=10, validation_data=test_set, nb_val_samples=300)

save_model_path = '{}{}'.format(data_root,'third_model.json')
save_model_weight = '{}{}'.format(data_root,'third_model_weights.h5')
history_path = '{}{}'.format(data_root,'history_3.json')

open(save_model_path, 'w').close()
open(save_model_weight, 'w').close()

model_json = model.to_json()
with open(save_model_path, 'w') as json_file:
    json_file.write(model_json)

model.save_weights(save_model_weight)
print('Model saved to disk!')

with open(history_path, 'w') as f:
    json.dump(history.history, f)
print('History saved to disk!')

print(history.history.keys())

plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""# Predict"""

def load_model_to_predict():
    json_file = open('drive/ML-Kaggle/third_model.json', 'r')
    loaded_model_json = json_file.read()
    json_file.close()

    loaded_model = model_from_json(loaded_model_json)
    loaded_model.load_weights('drive/ML-Kaggle/third_model_weights.h5')

    sgd = optimizers.SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)
    loaded_model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])

    return loaded_model

model = load_model_to_predict()

def make_prediction(img_path):
    
    img = cv2.imread(img_path, 1)
    img = cv2.resize(img,(224,224))
    img = np.reshape(img,[1,224,224,3])

    preds = model.predict_classes(img)

    return preds

img_path_imp = 'drive/ML-Kaggle/UnseenData/Impressionism/'
    
imp = []

for root, dirs, files in os.walk(img_path_imp):  
    for filename in files:
        imp.append(filename)

print("Impressionism\n")

results = []

for f in imp:
    str = img_path_imp + f
    x = make_prediction(str)
    
    if x==[0]:
        results.append("Expressionism")
    elif x==[1]:
        results.append("Impressionism")
    elif x==[2]:
        results.append("Surrealism")
        
print(len(results))

count_im = 0

for i in range(0,211):
    if results[i] == "Impressionism":
        count_im += 1
        
accuracy = count_im/len(results)
print(accuracy)

img_path_imp = 'drive/ML-Kaggle/UnseenData/Expressionism/'
    
imp = []

for root, dirs, files in os.walk(img_path_imp):  
    for filename in files:
        imp.append(filename)

print("Expressionism\n")

results = []

for f in imp:
    str = img_path_imp + f
    x = make_prediction(str)
    
    #print(x)
    
    if x==[0]:
        results.append("Expressionism")
    elif x==[1]:
        results.append("Impressionism")
    elif x==[2]:
        results.append("Surrealism")
        
print(len(results))

count_ex = 0

for i in range(0,len(results)):
    if results[i] == "Expressionism":
        count_ex += 1
        
accuracy = count_ex/len(results)
print(accuracy)

img_path_imp = 'drive/ML-Kaggle/UnseenData/Surrealism/'
    
imp = []

for root, dirs, files in os.walk(img_path_imp):  
    for filename in files:
        imp.append(filename)

print("Surrealism\n")

results = []

for f in imp:
    str = img_path_imp + f
    x = make_prediction(str)
    
    if x==[0]:
        results.append("Expressionism")
    elif x==[1]:
        results.append("Impressionism")
    elif x==[2]:
        results.append("Surrealism")
        
print(len(results))

count_su = 0

for i in range(0,len(results)):
    if results[i] == "Surrealism":
        count_su += 1
        
accuracy = count_su/len(results)
print(accuracy)

final_accuracy = (count_im+count_ex+count_su)/(211+200+205)
print(final_accuracy)

